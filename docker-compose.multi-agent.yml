version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: open-webui-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: openwebui
      POSTGRES_USER: openwebui
      POSTGRES_PASSWORD: openwebui_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U openwebui -d openwebui"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - multi-agent-network

  # Redis for WebSocket and caching
  redis:
    image: redis:7-alpine
    container_name: open-webui-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - multi-agent-network

  # Open WebUI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: open-webui-backend
    restart: unless-stopped
    environment:
      # Database configuration
      DATABASE_URL: postgresql://openwebui:openwebui_password@postgres:5432/openwebui
      
      # Redis configuration for WebSocket
      WEBSOCKET_MANAGER: redis
      WEBSOCKET_REDIS_URL: redis://:redis_password@redis:6379/0
      ENABLE_WEBSOCKET_SUPPORT: true
      
      # Security
      WEBUI_SECRET_KEY: your-secret-key-change-this-in-production
      
      # Multi-agent specific environment variables
      JIUTIAN_API_KEY_1: ${JIUTIAN_API_KEY_1:-}
      JIUTIAN_API_KEY_2: ${JIUTIAN_API_KEY_2:-}
      JIUTIAN_API_KEY_3: ${JIUTIAN_API_KEY_3:-}
      
      # Other configurations
      WEBUI_AUTH: true
      DEFAULT_USER_ROLE: student
      ENABLE_SIGNUP: true
      
      # Logging
      LOG_LEVEL: INFO
      
      # CORS
      CORS_ALLOW_ORIGIN: "*"
      
    volumes:
      - backend_data:/app/backend/data
      - ./backend/open_webui:/app/backend/open_webui
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - multi-agent-network

  # Open WebUI Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: open-webui-frontend
    restart: unless-stopped
    environment:
      BACKEND_URL: http://backend:8080
      PUBLIC_API_BASE_URL: http://localhost:8080
    volumes:
      - ./src:/app/src
      - ./static:/app/static
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - multi-agent-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: open-webui-nginx
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - multi-agent-network

  # Mock Jiutian API Server (for testing)
  mock-jiutian:
    build:
      context: ./test
      dockerfile: Dockerfile.mock-jiutian
    container_name: mock-jiutian-api
    restart: unless-stopped
    environment:
      PORT: 9999
    ports:
      - "9999:9999"
    networks:
      - multi-agent-network
    profiles:
      - testing

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: open-webui-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - multi-agent-network
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: open-webui-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin_password
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - multi-agent-network
    profiles:
      - monitoring

  # Load testing with k6
  k6:
    image: grafana/k6:latest
    container_name: open-webui-k6
    volumes:
      - ./test/k6:/scripts
    environment:
      BASE_URL: http://backend:8080
      WS_URL: ws://backend:8080
      TEST_TOKEN: ${TEST_TOKEN:-test-token}
    command: run /scripts/multi-agent-load-test.js
    depends_on:
      - backend
    networks:
      - multi-agent-network
    profiles:
      - testing

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  multi-agent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16